version: '3.8' # Specify Docker Compose file version

services:
  backend:
    build:
      context: ./backend # Path to the backend Dockerfile directory
      dockerfile: Dockerfile
    ports:
      - "3001:3001" # Map host port to container port (host:container)
    volumes:
      # For development, mount local source code into container for live reloading
      # Note: This bypasses the COPY . . in Dockerfile for src, so changes are reflected.
      # node_modules should NOT be mounted from host to avoid platform issues.
      # The Dockerfile's npm install handles node_modules within the container.
      - ./backend/src:/app/src # Mount the src directory
      # If you want to reflect changes to package.json immediately (requires rebuild sometimes):
      # - ./backend/package.json:/app/package.json
      # - ./backend/package-lock.json:/app/package-lock.json
    env_file:
      - ./backend/.env # Load environment variables from .env file in backend directory
    depends_on:
      db:
        condition: service_healthy # Wait for db to be healthy before starting backend
    environment:
      # Override or set environment variables here if needed, e.g., for DB connection
      # These will override those in .env if names conflict.
      - NODE_ENV=development
      - DB_HOST=db # Service name 'db' is resolvable within Docker network
      # DB_USER, DB_PASS, DB_NAME should match what's in backend/.env and db service below

  db:
    image: postgres:15-alpine # Use an official PostgreSQL image (e.g., version 15 Alpine)
    ports:
      - "54320:5432" # Map host port (e.g., 54320) to container's PostgreSQL port (5432)
                     # Avoids conflict if local PostgreSQL is running on 5432.
    environment:
      POSTGRES_USER: ${DB_USER:-your_db_user} # Use from .env or default
      POSTGRES_PASSWORD: ${DB_PASS:-your_db_password}
      POSTGRES_DB: ${DB_NAME:-cv_builder_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist database data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-your_db_user} -d ${DB_NAME:-cv_builder_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: # Defines a named volume for data persistence
